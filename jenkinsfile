pipeline {
    agent any

    tools {
        nodejs 'Nodejs'
    }

    environment {
        // Environment variables
        DOCKER_REPO_NAME = 'nunuokorie/docker-jenkins'
        DOCKER_IMAGE_TAG = "${BUILD_ID}-${BUILD_NUMBER}"
        DOCKER_REGISTRY = 'https://index.docker.io/v1/'  // Corrected for Docker Hub
        EC2_IP = '34.239.130.152'        
        RUNNING_CONTAINER = 'myapp'
    }

    stages {
        stage('Checkout') {
            steps {
                echo "Checking out source code..."
                git branch: 'main', credentialsId: 'Git-credentials', url: 'https://github.com/Nunu86/my-forge-Bloom.git'
            }
        }

        stage('Install dependencies') {
            steps {
                echo "Installing dependencies..."
                sh 'npm install'
            }
        }

        stage('Test') {
            steps {
                echo "Running tests..."
                sh 'npm test'
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Building Docker image..."
                sh "docker build -t ${DOCKER_REPO_NAME}:${DOCKER_IMAGE_TAG} ."
            }
        }

        stage('Push Docker Image') {
            steps {
                echo "Pushing Docker image to repository..."
                withCredentials([usernamePassword(credentialsId: 'docker-credentials', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) {
                    sh "echo $PASSWORD | docker login -u $USERNAME --password-stdin"
                    sh "docker push ${DOCKER_REPO_NAME}:${DOCKER_IMAGE_TAG}"
                }
                
            }
        }

        stage('Deploy') {
            steps {
                echo "Deploying to EC2..."
                sshagent(['EC2']) {
                    echo 'Logging into prod instance...'
                    sh "ssh -o StrictHostKeyChecking=no ubuntu@${EC2_IP}"
                    echo 'Stopping and removing running containers (if running)'
                    sh "docker stop ${RUNNING_CONTAINER} || true"
                    sh "docker rm ${RUNNING_CONTAINER} || true"

                    echo 'pulling and running new docker image'
                    withCredentials([usernamePassword(credentialsId: 'docker-credentials', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) {
                    sh "echo $PASSWORD | docker login -u $USERNAME --password-stdin"
                    sh "docker pull ${DOCKER_REPO_NAME}:${DOCKER_IMAGE_TAG}"
                    sh "docker run -d --name ${RUNNING_CONTAINER} -p 80:80 ${DOCKER_REPO_NAME}:${DOCKER_IMAGE_TAG}"

                }
            }
        }
    }

    post {
        always {
            echo "Cleaning up workspace..."
             cleanWs()  // Uncomment if you want to clean the workspace
        }
        success {
            echo "Build and deploy completed successfully!"
        }
        failure {
            echo "Build or deployment failed. Check logs for details."
        }
    }
}
